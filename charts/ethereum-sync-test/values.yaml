cronjob:
  enabled: true
  schedule: '0 0 * * 0'
  suspend: false
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  # activeDeadlineSeconds: 60000

workflow:
  # Create an ArgoCD Workflow Template
  enabled: true

job:
  backoffLimit: 3
  restartPolicy: OnFailure
  ttlSecondsAfterFinished: 120
  terminationGracePeriodSeconds: 15


tolerations: []

nodeSelector: {}

affinity: {}

extraPorts: []

persistence:
  # -- Uses an EmptyDir when not enabled
  enabled: false
  # -- Use an existing PVC when persistence.enabled
  existingClaim: null
  # -- Access mode for the volume claim template
  accessModes:
  - ReadWriteOnce
  # -- Storage class for the volume claim template
  storageClassName: ""
  # -- Requested size for volume claim template
  size: 20Gi
  # -- Annotations for volume claim template
  annotations: {}
  # -- Selector for volume claim template
  selector: {}
  #   matchLabels:
  #     app.kubernetes.io/name: something
  # -- Host path configuration
  hostPath:
    enabled: false
    path: /opt/ethereum-sync-tests
    type: DirectoryOrCreate

global:
  initContainers:
    initStorage:
      enabled: true
      image:
        repository: busybox
        tag: "1.34.0"
        pullPolicy: IfNotPresent
      command:
        - /bin/sh
        - -ace
        - | 
         rm -rf /data/*
         rm -rf /data/kill-pod
         mkdir -p /data/execution
         mkdir -p /data/consensus
         touch /data/execution/test.txt
         touch /data/consensus/test.txt
         ls /data
    initChownData:
      # -- Init container to set the correct permissions to access data directories
      enabled: true
      image:
        repository: busybox
        tag: "1.34.0"
        pullPolicy: IfNotPresent
      # -- Resource requests and limits
      resources: {}

    generateJWT:
      enabled: true # If disabled you must provide a secret in global.jwtsecret
      name: generate-jwt-secret
      image:
        repository: alpine
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - /bin/sh
        - -ace
        - |
          apk add openssl
          openssl rand -hex 32 > /data/jwtsecret
          echo 'Done!'
      resources: {}
      volumeMounts:
      - name: storage
        mountPath: "/data"

  # When p2pNodePort is enabled, your P2P port will be exposed via service type NodePort.
  # This is useful if you want to expose and announce your node to the Internet.
  # Limitation: You can only one have one replica when exposing via NodePort.
  #             Check the chart README.md for more details
  p2pNodePort:
    # -- Expose P2P port via NodePort
    enabled: false
    # -- Ports can be configured in global.ethereum.execution.client.ports.p2p_tcp etc
    initContainer:
      image:
        # -- Container image to fetch nodeport information
        repository: lachlanevenson/k8s-kubectl
        # -- Container tag
        tag: v1.21.3
        # -- Container pull policy
        pullPolicy: IfNotPresent

  networkConfigs:
    sepolia:
      execution:
        static_peers: []
        config: {}
        args:
          geth:
            - --sepolia
          nethermind:
            - --config=sepolia
          besu:
            - --network=sepolia
          erigon:
            - --chain=sepolia
      consensus:
        config: {}
        args:
          lighthouse:
            - --network=sepolia
          prysm:
            - --sepolia
          teku:
            - --network=sepolia
          nimbus:
            - --network=sepolia
          lodestar:
            - --network=sepolia
    mainnet:
      execution:
        static_peers: []
        config: {}
        args:
          geth:
          - 
          nethermind:
          - 
          besu:
          - 
          erigon:
          - 
      consensus:
        config: {}
        args:
          lighthouse:
          - 
          prysm:
          - 
          teku:
          - 
          nimbus:
          - 
          lodestar:
          - 

  ethereum:
    network: sepolia

    execution:
      client:
        name: geth

      logLevel: info

      dataDir: /data/execution

      config:
        ports:
          engine_api: 8551
          engine_ws: 8555
          p2p_tcp: 30141
          p2p_udp: 30141
          http_rpc: 8545
          ws_rpc: 8546
          metrics: 6060


    consensus:
      client:
        name: prysm

      logLevel: info
      dataDir: /data/consensus

      checkpointSync:
        enabled: false
        nodeUrl: http://localhost:5052

      config:
        ports:
          p2p_tcp: 30241
          p2p_udp: 30241
          http_api: 5052
          rpc: 5053
          metrics: 5054


  # -- The security context for pods
  # @default -- See `values.yaml`
  # TODO(sam.caldermason): Actually use this
  securityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001

## Common values
common:
  coordinator:
    enabled: true
    image:
      repository: samcm/sync-test-coordinator
      tag: latest
      pullPolicy: IfNotPresent
    config_yaml:
      test:
        name: "basic"

        tasks:
          - name: sleep
            config:
              duration: 15s

          - name: execution_is_healthy
          - name: consensus_is_healthy

          - name: both_are_synced
            config:
              consensus:
                percent: 100
                wait_for_chain_progression: true
                min_slot_height: 10
              execution:
                percent: 100
                wait_for_chain_progression: true
                min_block_height: 10
                

          - name: run_command
            config:
              command:
                - "sh"
                - "-c"
                - "touch /data/execution/finished"

          - name: run_command
            config:
              command:
                - "sh"
                - "-c"
                - "touch /data/consensus/finished"
          - name: run_command
            config:
              command:
                - "sh"
                - "-c"
                - "pkill -INT -f /data/execution"
              allowed_to_fail: true

          - name: run_command
            config:
              command:
                - "sh"
                - "-c"
                - "pkill -INT -f /data/consensus"
              allowed_to_fail: true

          - name: run_command
            config:
              command:
                - "sh"
                - "-c"
                - "pkill -INT -f exporter"
              allowed_to_fail: true


      execution:
        url: http://localhost:8545

      consensus:
        url: http://localhost:5052

  metricsExporter:
    enabled: true
    # image:
    #   repository: samcm/ethereum-metrics-exporter
    #   tag: latest
    #   pullPolicy: IfNotPresent
    port: 9090

## Client-specific config
geth:
  image:
    repository: ethereum/client-go
    tag: "{{inputs.parameters.tag}}"
    pullPolicy: Always

nethermind:
  image:
    repository: nethermind/nethermind
    tag: latest
    pullPolicy: Always

besu:
  image:
    repository: hyperledger/besu
    tag: latest
    pullPolicy: Always


lighthouse:
  image:
    repository: sigp/lighthouse
    tag: latest
    pullPolicy: Always

prysm:
  image:
    repository: ethpandaops/prysm # Official prysm image doesnt have `sh` which is required for p2pnodeport
    # repository: gcr.io/prysmaticlabs/prysm/beacon-chain
    tag: master
    pullPolicy: Always

teku:
  image:
    repository: consensys/teku
    tag: latest
    pullPolicy: Always

nimbus:
  image:
    repository: statusim/nimbus-eth2
    tag: amd64-latest
    pullPolicy: Always

lodestar:
  image:
    repository: chainsafe/lodestar
    tag: latest
    pullPolicy: Always

erigon:
  image:
    repository: thorax/erigon
    tag: stable
    pullPolicy: Always

rbac:
  # -- Specifies whether RBAC resources are to be created
  create: true

  # serviceAccountName: ""
  # -- Required ClusterRole rules
  # @default -- See `values.yaml`
  clusterRules:
     # Required to obtain the nodes external IP
    - apiGroups: [""]
      resources:
      - "nodes"
      verbs:
      - "get"
      - "list"
      - "watch"
  # -- Required ClusterRole rules
  # @default -- See `values.yaml`
  rules:
    # Required to get information about the serices nodePort.
    - apiGroups: [""]
      resources:
      - "services"
      verbs:
      - "get"
      - "list"
      - "watch"

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""